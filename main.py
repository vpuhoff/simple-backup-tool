#!/usr/bin/env python3
"""
Simple Backup - –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤.
"""

import click
import yaml
from pathlib import Path
from typing import Dict, Any
import shutil


def should_skip_directory(dir_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    skip_dirs = {
        '.venv', '__pycache__', '.git', 'node_modules', 
        '.pytest_cache', '.mypy_cache', 'build', 'dist'
    }
    return dir_name in skip_dirs or dir_name.startswith('.')


def should_include_file(file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª –≤ –±—ç–∫–∞–ø."""
    extensions = {'.py', '.md', '.yml', '.yaml', '.txt', '.json', '.toml', '.cfg', '.ini'}
    return file_path.suffix.lower() in extensions


def read_file_content(file_path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏."""
    encodings = ['utf-8', 'cp1251', 'latin-1']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except UnicodeDecodeError:
            continue
    
    return f"<–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}>"


def scan_directory(root_path: Path) -> Dict[str, Any]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞."""
    project_structure = {
        'metadata': {
            'root_path': str(root_path.absolute()),
            'backup_date': str(Path().cwd()),
            'total_files': 0,
            'total_directories': 0
        },
        'structure': {}
    }
    
    files_count = 0
    dirs_count = 0
    
    for item in root_path.rglob('*'):
        if item.is_file() and should_include_file(item):
            rel_path = item.relative_to(root_path)
            path_parts = list(rel_path.parts)
            
            current_level = project_structure['structure']
            for i, part in enumerate(path_parts[:-1]):
                if part not in current_level:
                    current_level[part] = {}
                    dirs_count += 1
                current_level = current_level[part]
            
            filename = path_parts[-1]
            content = read_file_content(item)
            current_level[filename] = {
                'type': 'file',
                'content': content,
                'size': item.stat().st_size,
                'modified': item.stat().st_mtime
            }
            files_count += 1
            
        elif item.is_dir() and should_skip_directory(item.name):
            continue
    
    project_structure['metadata']['total_files'] = files_count
    project_structure['metadata']['total_directories'] = dirs_count
    
    return project_structure


def create_directory_structure(base_path: Path, structure: Dict[str, Any]) -> int:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤."""
    created_files = 0
    
    for name, content in structure.items():
        current_path = base_path / name
        
        if isinstance(content, dict) and content.get('type') == 'file':
            try:
                current_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(current_path, 'w', encoding='utf-8') as f:
                    f.write(content['content'])
                
                created_files += 1
                click.echo(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {current_path}")
                
            except Exception as e:
                click.echo(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {current_path}: {e}")
                
        elif isinstance(content, dict):
            try:
                current_path.mkdir(parents=True, exist_ok=True)
                click.echo(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_path}")
                
                created_files += create_directory_structure(current_path, content)
                
            except Exception as e:
                click.echo(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {current_path}: {e}")
    
    return created_files


@click.group()
@click.version_option(version='0.1.0')
def cli():
    """Simple Backup - –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    pass


@cli.command()
@click.argument('output_file', type=click.Path())
@click.option('--path', '-p', default='.', help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--verbose', '-v', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
def create(output_file, path, verbose):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞ –≤ YAML —Ñ–∞–π–ª."""
    root_path = Path(path).resolve()
    
    if not root_path.exists():
        click.echo(f"‚úó –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {root_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", err=True)
        raise click.Abort()
    
    if verbose:
        click.echo(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {root_path}")
        click.echo("–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: .venv, __pycache__, .git, node_modules, .pytest_cache, .mypy_cache, build, dist")
        click.echo("–í–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã: .py, .md, .yml, .yaml, .txt, .json, .toml, .cfg, .ini")
    
    try:
        with click.progressbar(length=1, label='–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞') as bar:
            project_structure = scan_directory(root_path)
            bar.update(1)
        
        output_path = Path(output_file)
        with open(output_path, 'w', encoding='utf-8') as f:
            yaml.dump(project_structure, f, default_flow_style=False, 
                     allow_unicode=True, sort_keys=False, indent=2)
        
        click.echo(f"\n‚úì –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        click.echo(f"üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path.absolute()}")
        click.echo(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        click.echo(f"   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {project_structure['metadata']['total_files']}")
        click.echo(f"   - –í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {project_structure['metadata']['total_directories']}")
        click.echo(f"   - –†–∞–∑–º–µ—Ä YAML —Ñ–∞–π–ª–∞: {output_path.stat().st_size / 1024:.1f} KB")
        
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('yaml_file', type=click.Path(exists=True))
@click.argument('output_dir', type=click.Path())
@click.option('--preview', '-p', is_flag=True, help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä')
@click.option('--force', '-f', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é')
def restore(yaml_file, output_dir, preview, force):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    yaml_path = Path(yaml_file)
    output_path = Path(output_dir)
    
    try:
        with open(yaml_path, 'r', encoding='utf-8') as f:
            project_data = yaml.safe_load(f)
        
        if not project_data or 'structure' not in project_data:
            click.echo("‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç YAML —Ñ–∞–π–ª–∞!", err=True)
            raise click.Abort()
        
        metadata = project_data.get('metadata', {})
        
        if preview:
            click.echo("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
            click.echo("=" * 50)
            click.echo(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: {metadata.get('root_path', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            click.echo(f"–î–∞—Ç–∞ –±—ç–∫–∞–ø–∞: {metadata.get('backup_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            click.echo(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {metadata.get('total_files', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            click.echo(f"–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {metadata.get('total_directories', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return
        
        if output_path.exists() and not force:
            if not click.confirm(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {output_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å?"):
                click.echo("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return
            else:
                shutil.rmtree(output_path)
                click.echo(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_path}")
        
        click.echo(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤: {output_path.absolute()}")
        
        output_path.mkdir(parents=True, exist_ok=True)
        
        with click.progressbar(length=metadata.get('total_files', 1), label='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤') as bar:
            created_files = create_directory_structure(output_path, project_data['structure'])
            bar.update(created_files)
        
        click.echo(f"\n‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        click.echo(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        click.echo(f"   - –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {created_files}")
        click.echo(f"   - –û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤: {metadata.get('total_files', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        click.echo(f"   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤: {output_path.absolute()}")
        
    except FileNotFoundError:
        click.echo(f"‚úó –§–∞–π–ª {yaml_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!", err=True)
        raise click.Abort()
    except yaml.YAMLError as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ YAML —Ñ–∞–π–ª–∞: {e}", err=True)
        raise click.Abort()
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}", err=True)
        raise click.Abort()


if __name__ == '__main__':
    cli()
